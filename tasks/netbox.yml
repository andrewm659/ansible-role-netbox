---
#- name: "PLAY 4: INSTALL & CONFIGURE NETBOX APP"
#  hosts: nbhost
#  remote_user: root
#  become: true
#  gather_facts: false
#  vars_files:
#    - vars/config.yml
#  tags: ['nbinstall']

- name: CLONE GIT REPO
  git:
    repo: https://github.com/netbox-community/netbox.git
    dest: /opt/netbox
  become: true

- name: CREATE NETBOX SYSTEM GROUP
  group:
    name: netbox
    state: present
    system: yes
  become: true

- name: CREATE NETBOX SYSTEM USER
  user:
    name: netbox
    groups: netbox
    state: present
    system: yes
  become: true

- name: SET NETBOX FILE PERMISSIONS
  file:
    #    path: /opt/netbox/netbox/media
    path: /opt/netbox
    owner: netbox
    recurse: true
  become: true

- name: CHECK FOR CONFIG FILE
  stat:
    path: /opt/netbox/netbox/netbox/configuration.py
  register: conf_test
  become: true

- name: POPULATE NETBOX CONFIGURATION FILE
  block:
  - name: GENERATE SECRET KEY
    command: python3 /opt/netbox/netbox/generate_secret_key.py
    register: secret_key
  # - debug:
  #     msg: secret key is {{ secret_key }}
  #   tags: ['debug', 'never']

- name: STORE KEY FOR TEMPLATE USE
  set_fact:
    nbconf_key: "{{ secret_key.stdout }}"
    cacheable: yes
# - debug:
#     msg: "{{ ansible_facts['nbconf_key'] }}"
#   tags: ['debug','never']

- name: POPULATE NETBOX CONFIG FROM TEMPLATE
  template:
    src: dbconf.j2
    dest: /opt/netbox/netbox/netbox/configuration.py
    mode: '0644'
  become: true
  when: conf_test.stat.exists == false

- name: CHECK IF UPGRADE.SH MUST RUN
  stat:
    path: /opt/netbox/venv
  register: venv_test

- name: RUN UPGRADE SCRIPT & CREATE SUPER USER
  block:
  - name: RUN UPGRADE.SH
    command: bash /opt/netbox/upgrade.sh
    become: true
  - name: CREATE SUPER USER
    become: true
    expect:
      echo: yes
      command: /bin/bash -c "source /opt/netbox/venv/bin/activate && python3 /opt/netbox/netbox/manage.py createsuperuser"
      timeout: 30
      responses: 
        Username: '{{ app["Username"] }}'
        Email address: '{{ app["Email"] }}'
        Password: '{{ app["Password"] }}'
        Password Again: '{{ app["Password"] }}'
          #      register: expect_CREATE_SUPER_USER_result
          #      failed_when: "expect_CREATE_SUPER_USER_result.rc != 0 and 'Success' not in expect_CREATE_SUPER_USER_result.stdout"

- name: RUN TEST INSTANCE
  shell: >
    source /opt/netbox/venv/bin/activate && python3 /opt/netbox/netbox/manage.py runserver 0.0.0.0:8000 --insecure
  async: 15
  poll: 0

- name: WAIT FOR TEST INSTANCE START
  pause:
   seconds: 5

- name: TEST SERVER RESPONSE
  uri:
    url: "http://{{ config['ip'] }}:8000 "
    return_content: yes
  register: uri_resp
  failed_when: "'<title>Home - NetBox</title>' not in uri_resp.content"
  when: venv_test.stat.exists == false

    #- name: "PLAY 6: CONFIG GUINICORN & INITIALIZE NETBOX"
    #  tags: ['init', 'gunicorn']

- name: COPY DEFAULT GUINICORN CONFIG
  copy:
    src: /opt/netbox/contrib/gunicorn.py
    dest: /opt/netbox/gunicorn.py
    remote_src: yes
  become: true

- name: COPY SYSTEMD FILES & RELOAD DAEMON
  copy:
    src: "{{ item }}"
    dest: /usr/lib/systemd/system/
    remote_src: yes
    force: yes
  become: true
  with_items:
    - /opt/netbox/contrib/netbox.service
    - /opt/netbox/contrib/netbox-rq.service

- name: START & ENABLE NETBOX SERVICE
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  become: true
  loop:
    - netbox-rq
    - netbox

- name: Reload systemd
  systemd:
    daemon_reload: yes
  become: true
